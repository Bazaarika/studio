// This file is intentionally kept simple to provide a basic offline experience.
// It caches the essential app shell files.

const CACHE_NAME = 'bazaarika-lite-cache-v1';
// This list should include the root page and essential JS/CSS bundles.
// Note: In a real production app, this list would be dynamically generated by the build process.
const urlsToCache = [
  '/',
  '/manifest.json',
  '/favicon.ico',
  '/logo192.png',
  // Add paths to your main JS/CSS bundles if you know them,
  // but for a basic offline page, the root '/' is often sufficient.
];

self.addEventListener('install', (event) => {
  // Perform install steps
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        // Add all the assets to the cache
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', (event) => {
  // Intercept fetch requests
  event.respondWith(
    // Try to find a response in the cache that matches the request
    caches.match(event.request)
      .then((response) => {
        // If a response is found in the cache, return it
        if (response) {
          return response;
        }

        // If the request is not in the cache, try to fetch it from the network
        return fetch(event.request).catch(() => {
            // If the network fetch fails (e.g., user is offline),
            // you can return a fallback offline page.
            // For a Single Page App, returning the cached root page ('/')
            // is often the best strategy.
            return caches.match('/');
        });
      })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            // Delete old caches
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
